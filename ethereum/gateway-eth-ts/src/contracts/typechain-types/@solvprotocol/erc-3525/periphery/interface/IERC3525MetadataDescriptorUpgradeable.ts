/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IERC3525MetadataDescriptorUpgradeableInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "constructContractURI"
      | "constructSlotURI"
      | "constructTokenURI"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "constructContractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "constructSlotURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "constructTokenURI",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "constructContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructSlotURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructTokenURI",
    data: BytesLike
  ): Result;
}

export interface IERC3525MetadataDescriptorUpgradeable extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): IERC3525MetadataDescriptorUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: IERC3525MetadataDescriptorUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  constructContractURI: TypedContractMethod<[], [string], "view">;

  constructSlotURI: TypedContractMethod<[slot: BigNumberish], [string], "view">;

  constructTokenURI: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "constructContractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "constructSlotURI"
  ): TypedContractMethod<[slot: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "constructTokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  filters: {};
}
