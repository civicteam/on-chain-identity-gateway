/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ERC3525UpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve(address,uint256)"
      | "approve(uint256,address,uint256)"
      | "balanceOf(address)"
      | "balanceOf(uint256)"
      | "contractURI"
      | "getApproved"
      | "isApprovedForAll"
      | "metadataDescriptor"
      | "name"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "slotOf"
      | "slotURI"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom(uint256,address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "transferFrom(uint256,uint256,uint256)"
      | "valueDecimals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "ApprovalValue"
      | "Initialized"
      | "SetMetadataDescriptor"
      | "SlotChanged"
      | "Transfer"
      | "TransferValue"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataDescriptor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "slotOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueDecimals",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slotOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueDecimals",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _approved: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _approved: string,
    _tokenId: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _approved: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _operator: AddressLike,
    _approved: boolean
  ];
  export type OutputTuple = [
    _owner: string,
    _operator: string,
    _approved: boolean
  ];
  export interface OutputObject {
    _owner: string;
    _operator: string;
    _approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalValueEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _operator: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _operator: string,
    _value: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _operator: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMetadataDescriptorEvent {
  export type InputTuple = [metadataDescriptor: AddressLike];
  export type OutputTuple = [metadataDescriptor: string];
  export interface OutputObject {
    metadataDescriptor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlotChangedEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _oldSlot: BigNumberish,
    _newSlot: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _oldSlot: bigint,
    _newSlot: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _oldSlot: bigint;
    _newSlot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _tokenId: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferValueEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _fromTokenId: bigint,
    _toTokenId: bigint,
    _value: bigint
  ];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC3525Upgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): ERC3525Upgradeable;
  waitForDeployment(): Promise<this>;

  interface: ERC3525UpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [tokenId_: BigNumberish, operator_: AddressLike],
    [bigint],
    "view"
  >;

  "approve(address,uint256)": TypedContractMethod<
    [to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;

  "approve(uint256,address,uint256)": TypedContractMethod<
    [tokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [void],
    "payable"
  >;

  "balanceOf(address)": TypedContractMethod<
    [owner_: AddressLike],
    [bigint],
    "view"
  >;

  "balanceOf(uint256)": TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint],
    "view"
  >;

  contractURI: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner_: AddressLike, operator_: AddressLike],
    [boolean],
    "view"
  >;

  metadataDescriptor: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from_: AddressLike,
      to_: AddressLike,
      tokenId_: BigNumberish,
      data_: BytesLike
    ],
    [void],
    "payable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator_: AddressLike, approved_: boolean],
    [void],
    "nonpayable"
  >;

  slotOf: TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;

  slotURI: TypedContractMethod<[slot_: BigNumberish], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index_: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner_: AddressLike, index_: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  "transferFrom(uint256,address,uint256)": TypedContractMethod<
    [fromTokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [bigint],
    "payable"
  >;

  "transferFrom(address,address,uint256)": TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;

  "transferFrom(uint256,uint256,uint256)": TypedContractMethod<
    [
      fromTokenId_: BigNumberish,
      toTokenId_: BigNumberish,
      value_: BigNumberish
    ],
    [void],
    "payable"
  >;

  valueDecimals: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, operator_: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "approve(uint256,address,uint256)"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[owner_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(uint256)"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner_: AddressLike, operator_: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "metadataDescriptor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from_: AddressLike,
      to_: AddressLike,
      tokenId_: BigNumberish,
      data_: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator_: AddressLike, approved_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slotOf"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "slotURI"
  ): TypedContractMethod<[slot_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner_: AddressLike, index_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom(uint256,address,uint256)"
  ): TypedContractMethod<
    [fromTokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      fromTokenId_: BigNumberish,
      toTokenId_: BigNumberish,
      value_: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "valueDecimals"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalValue"
  ): TypedContractEvent<
    ApprovalValueEvent.InputTuple,
    ApprovalValueEvent.OutputTuple,
    ApprovalValueEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "SetMetadataDescriptor"
  ): TypedContractEvent<
    SetMetadataDescriptorEvent.InputTuple,
    SetMetadataDescriptorEvent.OutputTuple,
    SetMetadataDescriptorEvent.OutputObject
  >;
  getEvent(
    key: "SlotChanged"
  ): TypedContractEvent<
    SlotChangedEvent.InputTuple,
    SlotChangedEvent.OutputTuple,
    SlotChangedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferValue"
  ): TypedContractEvent<
    TransferValueEvent.InputTuple,
    TransferValueEvent.OutputTuple,
    TransferValueEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ApprovalValue(uint256,address,uint256)": TypedContractEvent<
      ApprovalValueEvent.InputTuple,
      ApprovalValueEvent.OutputTuple,
      ApprovalValueEvent.OutputObject
    >;
    ApprovalValue: TypedContractEvent<
      ApprovalValueEvent.InputTuple,
      ApprovalValueEvent.OutputTuple,
      ApprovalValueEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "SetMetadataDescriptor(address)": TypedContractEvent<
      SetMetadataDescriptorEvent.InputTuple,
      SetMetadataDescriptorEvent.OutputTuple,
      SetMetadataDescriptorEvent.OutputObject
    >;
    SetMetadataDescriptor: TypedContractEvent<
      SetMetadataDescriptorEvent.InputTuple,
      SetMetadataDescriptorEvent.OutputTuple,
      SetMetadataDescriptorEvent.OutputObject
    >;

    "SlotChanged(uint256,uint256,uint256)": TypedContractEvent<
      SlotChangedEvent.InputTuple,
      SlotChangedEvent.OutputTuple,
      SlotChangedEvent.OutputObject
    >;
    SlotChanged: TypedContractEvent<
      SlotChangedEvent.InputTuple,
      SlotChangedEvent.OutputTuple,
      SlotChangedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferValue(uint256,uint256,uint256)": TypedContractEvent<
      TransferValueEvent.InputTuple,
      TransferValueEvent.OutputTuple,
      TransferValueEvent.OutputObject
    >;
    TransferValue: TypedContractEvent<
      TransferValueEvent.InputTuple,
      TransferValueEvent.OutputTuple,
      TransferValueEvent.OutputObject
    >;
  };
}
