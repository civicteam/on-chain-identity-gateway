/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ERC2771TestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addForwarder"
      | "getMsgData"
      | "getMsgDataWithArg"
      | "getMsgSender"
      | "isTrustedForwarder"
      | "removeForwarder"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MsgData" | "MsgSender"): EventFragment;

  encodeFunctionData(
    functionFragment: "addForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMsgData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMsgDataWithArg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMsgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeForwarder",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMsgData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMsgDataWithArg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeForwarder",
    data: BytesLike
  ): Result;
}

export namespace MsgDataEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MsgSenderEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC2771Test extends BaseContract {
  connect(runner?: ContractRunner | null): ERC2771Test;
  waitForDeployment(): Promise<this>;

  interface: ERC2771TestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [void],
    "nonpayable"
  >;

  getMsgData: TypedContractMethod<[], [void], "nonpayable">;

  getMsgDataWithArg: TypedContractMethod<
    [arg0: BigNumberish],
    [void],
    "nonpayable"
  >;

  getMsgSender: TypedContractMethod<[], [string], "nonpayable">;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  removeForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMsgData"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMsgDataWithArg"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMsgSender"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "MsgData"
  ): TypedContractEvent<
    MsgDataEvent.InputTuple,
    MsgDataEvent.OutputTuple,
    MsgDataEvent.OutputObject
  >;
  getEvent(
    key: "MsgSender"
  ): TypedContractEvent<
    MsgSenderEvent.InputTuple,
    MsgSenderEvent.OutputTuple,
    MsgSenderEvent.OutputObject
  >;

  filters: {
    "MsgData(bytes)": TypedContractEvent<
      MsgDataEvent.InputTuple,
      MsgDataEvent.OutputTuple,
      MsgDataEvent.OutputObject
    >;
    MsgData: TypedContractEvent<
      MsgDataEvent.InputTuple,
      MsgDataEvent.OutputTuple,
      MsgDataEvent.OutputObject
    >;

    "MsgSender(address)": TypedContractEvent<
      MsgSenderEvent.InputTuple,
      MsgSenderEvent.OutputTuple,
      MsgSenderEvent.OutputObject
    >;
    MsgSender: TypedContractEvent<
      MsgSenderEvent.InputTuple,
      MsgSenderEvent.OutputTuple,
      MsgSenderEvent.OutputObject
    >;
  };
}
