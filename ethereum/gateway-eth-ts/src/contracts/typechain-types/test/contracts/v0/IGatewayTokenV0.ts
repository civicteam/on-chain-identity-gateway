/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type ChargeStruct = {
  value: BigNumberish;
  chargeType: BigNumberish;
  token: AddressLike;
  recipient: AddressLike;
};

export type ChargeStructOutput = [
  value: bigint,
  chargeType: bigint,
  token: string,
  recipient: string
] & { value: bigint; chargeType: bigint; token: string; recipient: string };

export interface IGatewayTokenV0Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addNetworkAuthority"
      | "createNetwork"
      | "getNetwork"
      | "getToken"
      | "isGatekeeper"
      | "isNetworkAuthority"
      | "mint"
      | "removeNetworkAuthority"
      | "renameNetwork"
      | "transferDAOManager"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DAOManagerTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "addNetworkAuthority",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNetwork",
    values: [BigNumberish, string, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetwork",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGatekeeper",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNetworkAuthority",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      ChargeStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNetworkAuthority",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renameNetwork",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDAOManager",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNetwork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renameNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDAOManager",
    data: BytesLike
  ): Result;
}

export namespace DAOManagerTransferredEvent {
  export type InputTuple = [
    previousDAOManager: AddressLike,
    newDAOManager: AddressLike,
    network: BigNumberish
  ];
  export type OutputTuple = [
    previousDAOManager: string,
    newDAOManager: string,
    network: bigint
  ];
  export interface OutputObject {
    previousDAOManager: string;
    newDAOManager: string;
    network: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGatewayTokenV0 extends BaseContract {
  connect(runner?: ContractRunner | null): IGatewayTokenV0;
  waitForDeployment(): Promise<this>;

  interface: IGatewayTokenV0Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addNetworkAuthority: TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;

  createNetwork: TypedContractMethod<
    [
      network: BigNumberish,
      name: string,
      daoGoverned: boolean,
      daoManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getNetwork: TypedContractMethod<[network: BigNumberish], [string], "view">;

  getToken: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        owner: string;
        state: bigint;
        identity: string;
        expiration: bigint;
        bitmask: bigint;
      }
    ],
    "view"
  >;

  isGatekeeper: TypedContractMethod<
    [gatekeeper: AddressLike, network: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isNetworkAuthority: TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [
      to: AddressLike,
      network: BigNumberish,
      expiration: BigNumberish,
      mask: BigNumberish,
      charge: ChargeStruct
    ],
    [void],
    "nonpayable"
  >;

  removeNetworkAuthority: TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;

  renameNetwork: TypedContractMethod<
    [network: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;

  transferDAOManager: TypedContractMethod<
    [
      previousManager: AddressLike,
      newManager: AddressLike,
      network: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addNetworkAuthority"
  ): TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createNetwork"
  ): TypedContractMethod<
    [
      network: BigNumberish,
      name: string,
      daoGoverned: boolean,
      daoManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNetwork"
  ): TypedContractMethod<[network: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getToken"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        owner: string;
        state: bigint;
        identity: string;
        expiration: bigint;
        bitmask: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isGatekeeper"
  ): TypedContractMethod<
    [gatekeeper: AddressLike, network: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isNetworkAuthority"
  ): TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      to: AddressLike,
      network: BigNumberish,
      expiration: BigNumberish,
      mask: BigNumberish,
      charge: ChargeStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeNetworkAuthority"
  ): TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renameNetwork"
  ): TypedContractMethod<
    [network: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferDAOManager"
  ): TypedContractMethod<
    [
      previousManager: AddressLike,
      newManager: AddressLike,
      network: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DAOManagerTransferred"
  ): TypedContractEvent<
    DAOManagerTransferredEvent.InputTuple,
    DAOManagerTransferredEvent.OutputTuple,
    DAOManagerTransferredEvent.OutputObject
  >;

  filters: {
    "DAOManagerTransferred(address,address,uint256)": TypedContractEvent<
      DAOManagerTransferredEvent.InputTuple,
      DAOManagerTransferredEvent.OutputTuple,
      DAOManagerTransferredEvent.OutputObject
    >;
    DAOManagerTransferred: TypedContractEvent<
      DAOManagerTransferredEvent.InputTuple,
      DAOManagerTransferredEvent.OutputTuple,
      DAOManagerTransferredEvent.OutputObject
    >;
  };
}
