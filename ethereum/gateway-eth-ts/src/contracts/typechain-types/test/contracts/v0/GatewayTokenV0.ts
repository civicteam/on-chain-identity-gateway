/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type ChargeStruct = {
  value: BigNumberish;
  chargeType: BigNumberish;
  token: AddressLike;
  recipient: AddressLike;
};

export type ChargeStructOutput = [
  value: bigint,
  chargeType: bigint,
  token: string,
  recipient: string
] & { value: bigint; chargeType: bigint; token: string; recipient: string };

export interface GatewayTokenV0Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAO_MANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "GATEKEEPER_ROLE"
      | "NETWORK_AUTHORITY_ROLE"
      | "addForwarder"
      | "addGatekeeper"
      | "addNetworkAuthority"
      | "allowance"
      | "approve(address,uint256)"
      | "approve(uint256,address,uint256)"
      | "balanceOf(address)"
      | "balanceOf(uint256)"
      | "burn"
      | "contractURI"
      | "createNetwork"
      | "flagsStorage"
      | "freeze"
      | "getApproved"
      | "getExpiration"
      | "getNetwork"
      | "getRoleAdmin"
      | "getToken"
      | "getTokenBitmask"
      | "getTokenIdsByOwnerAndNetwork"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isApprovedForAll"
      | "isGatekeeper"
      | "isNetworkAuthority"
      | "isNetworkDAOGoverned"
      | "isSuperAdmin"
      | "isTrustedForwarder"
      | "metadataDescriptor"
      | "mint"
      | "name"
      | "ownerOf"
      | "proxiableUUID"
      | "removeForwarder"
      | "removeGatekeeper"
      | "removeNetworkAuthority"
      | "renameNetwork"
      | "renounceRole"
      | "revoke"
      | "revokeRole"
      | "revokeSuperAdmin"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBitmask"
      | "setExpiration"
      | "setMetadataDescriptor"
      | "setSuperAdmin"
      | "slotOf"
      | "slotURI"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferDAOManager"
      | "transferFrom(uint256,address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "transferFrom(uint256,uint256,uint256)"
      | "transfersRestricted"
      | "unfreeze"
      | "updateFlagsStorage"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "valueDecimals"
      | "verifyToken(address,uint256)"
      | "verifyToken(uint256)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "Approval"
      | "ApprovalForAll"
      | "ApprovalValue"
      | "BeaconUpgraded"
      | "BitMaskUpdated"
      | "DAOManagerTransferred"
      | "Expiration"
      | "FlagsStorageUpdated"
      | "Freeze"
      | "Initialized"
      | "Revoke"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetMetadataDescriptor"
      | "SlotChanged"
      | "SuperAdminAdded"
      | "SuperAdminRemoved"
      | "Transfer"
      | "TransferValue"
      | "Unfreeze"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DAO_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GATEKEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NETWORK_AUTHORITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addGatekeeper",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addNetworkAuthority",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createNetwork",
    values: [BigNumberish, string, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flagsStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeze",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetwork",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBitmask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIdsByOwnerAndNetwork",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, AddressLike, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGatekeeper",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNetworkAuthority",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNetworkDAOGoverned",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSuperAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataDescriptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      ChargeStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGatekeeper",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNetworkAuthority",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renameNetwork",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSuperAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBitmask",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpiration",
    values: [BigNumberish, BigNumberish, ChargeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataDescriptor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuperAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slotOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferDAOManager",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfersRestricted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unfreeze",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlagsStorage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "valueDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyToken(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyToken(uint256)",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DAO_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GATEKEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NETWORK_AUTHORITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flagsStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNetwork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBitmask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIdsByOwnerAndNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNetworkDAOGoverned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renameNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBitmask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slotOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDAOManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfersRestricted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unfreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFlagsStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyToken(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyToken(uint256)",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _approved: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _approved: string,
    _tokenId: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _approved: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _operator: AddressLike,
    _approved: boolean
  ];
  export type OutputTuple = [
    _owner: string,
    _operator: string,
    _approved: boolean
  ];
  export interface OutputObject {
    _owner: string;
    _operator: string;
    _approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalValueEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _operator: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _operator: string,
    _value: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _operator: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BitMaskUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, bitmask: BigNumberish];
  export type OutputTuple = [tokenId: bigint, bitmask: bigint];
  export interface OutputObject {
    tokenId: bigint;
    bitmask: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DAOManagerTransferredEvent {
  export type InputTuple = [
    previousDAOManager: AddressLike,
    newDAOManager: AddressLike,
    network: BigNumberish
  ];
  export type OutputTuple = [
    previousDAOManager: string,
    newDAOManager: string,
    network: bigint
  ];
  export interface OutputObject {
    previousDAOManager: string;
    newDAOManager: string;
    network: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpirationEvent {
  export type InputTuple = [tokenId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [tokenId: bigint, timestamp: bigint];
  export interface OutputObject {
    tokenId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlagsStorageUpdatedEvent {
  export type InputTuple = [flagsStorage: AddressLike];
  export type OutputTuple = [flagsStorage: string];
  export interface OutputObject {
    flagsStorage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FreezeEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    domain: BigNumberish,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    domain: bigint,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    domain: bigint;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    domain: BigNumberish,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    role: string,
    domain: bigint,
    account: string,
    sender: string
  ];
  export interface OutputObject {
    role: string;
    domain: bigint;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    domain: BigNumberish,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    role: string,
    domain: bigint,
    account: string,
    sender: string
  ];
  export interface OutputObject {
    role: string;
    domain: bigint;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMetadataDescriptorEvent {
  export type InputTuple = [metadataDescriptor: AddressLike];
  export type OutputTuple = [metadataDescriptor: string];
  export interface OutputObject {
    metadataDescriptor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlotChangedEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _oldSlot: BigNumberish,
    _newSlot: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _oldSlot: bigint,
    _newSlot: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _oldSlot: bigint;
    _newSlot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuperAdminAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuperAdminRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _tokenId: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferValueEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _fromTokenId: bigint,
    _toTokenId: bigint,
    _value: bigint
  ];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnfreezeEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GatewayTokenV0 extends BaseContract {
  connect(runner?: ContractRunner | null): GatewayTokenV0;
  waitForDeployment(): Promise<this>;

  interface: GatewayTokenV0Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAO_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GATEKEEPER_ROLE: TypedContractMethod<[], [string], "view">;

  NETWORK_AUTHORITY_ROLE: TypedContractMethod<[], [string], "view">;

  addForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [void],
    "nonpayable"
  >;

  addGatekeeper: TypedContractMethod<
    [gatekeeper: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;

  addNetworkAuthority: TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [tokenId_: BigNumberish, operator_: AddressLike],
    [bigint],
    "view"
  >;

  "approve(address,uint256)": TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "payable"
  >;

  "approve(uint256,address,uint256)": TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "payable"
  >;

  "balanceOf(address)": TypedContractMethod<
    [owner_: AddressLike],
    [bigint],
    "view"
  >;

  "balanceOf(uint256)": TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint],
    "view"
  >;

  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  contractURI: TypedContractMethod<[], [string], "view">;

  createNetwork: TypedContractMethod<
    [
      network: BigNumberish,
      name: string,
      daoGoverned: boolean,
      daoManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  flagsStorage: TypedContractMethod<[], [string], "view">;

  freeze: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getApproved: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  getExpiration: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  getNetwork: TypedContractMethod<[network: BigNumberish], [string], "view">;

  getRoleAdmin: TypedContractMethod<
    [role: BytesLike, domain: BigNumberish],
    [string],
    "view"
  >;

  getToken: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        owner: string;
        state: bigint;
        identity: string;
        expiration: bigint;
        bitmask: bigint;
      }
    ],
    "view"
  >;

  getTokenBitmask: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getTokenIdsByOwnerAndNetwork: TypedContractMethod<
    [owner: AddressLike, network: BigNumberish],
    [bigint[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, domain: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, domain: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _superAdmin: AddressLike,
      _flagsStorage: AddressLike,
      _trustedForwarders: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner_: AddressLike, operator_: AddressLike],
    [boolean],
    "view"
  >;

  isGatekeeper: TypedContractMethod<
    [gatekeeper: AddressLike, network: BigNumberish],
    [boolean],
    "view"
  >;

  isNetworkAuthority: TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [boolean],
    "view"
  >;

  isNetworkDAOGoverned: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  isSuperAdmin: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  metadataDescriptor: TypedContractMethod<[], [string], "view">;

  mint: TypedContractMethod<
    [
      to: AddressLike,
      network: BigNumberish,
      expiration: BigNumberish,
      mask: BigNumberish,
      arg4: ChargeStruct
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [void],
    "nonpayable"
  >;

  removeGatekeeper: TypedContractMethod<
    [gatekeeper: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeNetworkAuthority: TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;

  renameNetwork: TypedContractMethod<
    [network: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, domain: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revoke: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, domain: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeSuperAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from_: AddressLike,
      to_: AddressLike,
      tokenId_: BigNumberish,
      data_: BytesLike
    ],
    [void],
    "payable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator_: AddressLike, approved_: boolean],
    [void],
    "nonpayable"
  >;

  setBitmask: TypedContractMethod<
    [tokenId: BigNumberish, mask: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExpiration: TypedContractMethod<
    [tokenId: BigNumberish, timestamp: BigNumberish, arg2: ChargeStruct],
    [void],
    "nonpayable"
  >;

  setMetadataDescriptor: TypedContractMethod<
    [_metadataDescriptor: AddressLike],
    [void],
    "nonpayable"
  >;

  setSuperAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  slotOf: TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;

  slotURI: TypedContractMethod<[slot_: BigNumberish], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index_: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner_: AddressLike, index_: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferDAOManager: TypedContractMethod<
    [
      previousManager: AddressLike,
      newManager: AddressLike,
      network: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "transferFrom(uint256,address,uint256)": TypedContractMethod<
    [fromTokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [bigint],
    "payable"
  >;

  "transferFrom(address,address,uint256)": TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;

  "transferFrom(uint256,uint256,uint256)": TypedContractMethod<
    [
      fromTokenId_: BigNumberish,
      toTokenId_: BigNumberish,
      value_: BigNumberish
    ],
    [void],
    "payable"
  >;

  transfersRestricted: TypedContractMethod<[], [boolean], "view">;

  unfreeze: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  updateFlagsStorage: TypedContractMethod<
    [flagsStorage: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  valueDecimals: TypedContractMethod<[], [bigint], "view">;

  "verifyToken(address,uint256)": TypedContractMethod<
    [owner: AddressLike, network: BigNumberish],
    [boolean],
    "view"
  >;

  "verifyToken(uint256)": TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAO_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GATEKEEPER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NETWORK_AUTHORITY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addGatekeeper"
  ): TypedContractMethod<
    [gatekeeper: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addNetworkAuthority"
  ): TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, operator_: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "approve(uint256,address,uint256)"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[owner_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(uint256)"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createNetwork"
  ): TypedContractMethod<
    [
      network: BigNumberish,
      name: string,
      daoGoverned: boolean,
      daoManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flagsStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "freeze"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getExpiration"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNetwork"
  ): TypedContractMethod<[network: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<
    [role: BytesLike, domain: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getToken"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        owner: string;
        state: bigint;
        identity: string;
        expiration: bigint;
        bitmask: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenBitmask"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenIdsByOwnerAndNetwork"
  ): TypedContractMethod<
    [owner: AddressLike, network: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, domain: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, domain: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _superAdmin: AddressLike,
      _flagsStorage: AddressLike,
      _trustedForwarders: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner_: AddressLike, operator_: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isGatekeeper"
  ): TypedContractMethod<
    [gatekeeper: AddressLike, network: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isNetworkAuthority"
  ): TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isNetworkDAOGoverned"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSuperAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "metadataDescriptor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      to: AddressLike,
      network: BigNumberish,
      expiration: BigNumberish,
      mask: BigNumberish,
      arg4: ChargeStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeGatekeeper"
  ): TypedContractMethod<
    [gatekeeper: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeNetworkAuthority"
  ): TypedContractMethod<
    [authority: AddressLike, network: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renameNetwork"
  ): TypedContractMethod<
    [network: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, domain: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, domain: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeSuperAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from_: AddressLike,
      to_: AddressLike,
      tokenId_: BigNumberish,
      data_: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator_: AddressLike, approved_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBitmask"
  ): TypedContractMethod<
    [tokenId: BigNumberish, mask: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpiration"
  ): TypedContractMethod<
    [tokenId: BigNumberish, timestamp: BigNumberish, arg2: ChargeStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMetadataDescriptor"
  ): TypedContractMethod<
    [_metadataDescriptor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSuperAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slotOf"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "slotURI"
  ): TypedContractMethod<[slot_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner_: AddressLike, index_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferDAOManager"
  ): TypedContractMethod<
    [
      previousManager: AddressLike,
      newManager: AddressLike,
      network: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(uint256,address,uint256)"
  ): TypedContractMethod<
    [fromTokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      fromTokenId_: BigNumberish,
      toTokenId_: BigNumberish,
      value_: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transfersRestricted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "unfreeze"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFlagsStorage"
  ): TypedContractMethod<[flagsStorage: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "valueDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyToken(address,uint256)"
  ): TypedContractMethod<
    [owner: AddressLike, network: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyToken(uint256)"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalValue"
  ): TypedContractEvent<
    ApprovalValueEvent.InputTuple,
    ApprovalValueEvent.OutputTuple,
    ApprovalValueEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "BitMaskUpdated"
  ): TypedContractEvent<
    BitMaskUpdatedEvent.InputTuple,
    BitMaskUpdatedEvent.OutputTuple,
    BitMaskUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DAOManagerTransferred"
  ): TypedContractEvent<
    DAOManagerTransferredEvent.InputTuple,
    DAOManagerTransferredEvent.OutputTuple,
    DAOManagerTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Expiration"
  ): TypedContractEvent<
    ExpirationEvent.InputTuple,
    ExpirationEvent.OutputTuple,
    ExpirationEvent.OutputObject
  >;
  getEvent(
    key: "FlagsStorageUpdated"
  ): TypedContractEvent<
    FlagsStorageUpdatedEvent.InputTuple,
    FlagsStorageUpdatedEvent.OutputTuple,
    FlagsStorageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Freeze"
  ): TypedContractEvent<
    FreezeEvent.InputTuple,
    FreezeEvent.OutputTuple,
    FreezeEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Revoke"
  ): TypedContractEvent<
    RevokeEvent.InputTuple,
    RevokeEvent.OutputTuple,
    RevokeEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetMetadataDescriptor"
  ): TypedContractEvent<
    SetMetadataDescriptorEvent.InputTuple,
    SetMetadataDescriptorEvent.OutputTuple,
    SetMetadataDescriptorEvent.OutputObject
  >;
  getEvent(
    key: "SlotChanged"
  ): TypedContractEvent<
    SlotChangedEvent.InputTuple,
    SlotChangedEvent.OutputTuple,
    SlotChangedEvent.OutputObject
  >;
  getEvent(
    key: "SuperAdminAdded"
  ): TypedContractEvent<
    SuperAdminAddedEvent.InputTuple,
    SuperAdminAddedEvent.OutputTuple,
    SuperAdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "SuperAdminRemoved"
  ): TypedContractEvent<
    SuperAdminRemovedEvent.InputTuple,
    SuperAdminRemovedEvent.OutputTuple,
    SuperAdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferValue"
  ): TypedContractEvent<
    TransferValueEvent.InputTuple,
    TransferValueEvent.OutputTuple,
    TransferValueEvent.OutputObject
  >;
  getEvent(
    key: "Unfreeze"
  ): TypedContractEvent<
    UnfreezeEvent.InputTuple,
    UnfreezeEvent.OutputTuple,
    UnfreezeEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ApprovalValue(uint256,address,uint256)": TypedContractEvent<
      ApprovalValueEvent.InputTuple,
      ApprovalValueEvent.OutputTuple,
      ApprovalValueEvent.OutputObject
    >;
    ApprovalValue: TypedContractEvent<
      ApprovalValueEvent.InputTuple,
      ApprovalValueEvent.OutputTuple,
      ApprovalValueEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "BitMaskUpdated(uint256,uint256)": TypedContractEvent<
      BitMaskUpdatedEvent.InputTuple,
      BitMaskUpdatedEvent.OutputTuple,
      BitMaskUpdatedEvent.OutputObject
    >;
    BitMaskUpdated: TypedContractEvent<
      BitMaskUpdatedEvent.InputTuple,
      BitMaskUpdatedEvent.OutputTuple,
      BitMaskUpdatedEvent.OutputObject
    >;

    "DAOManagerTransferred(address,address,uint256)": TypedContractEvent<
      DAOManagerTransferredEvent.InputTuple,
      DAOManagerTransferredEvent.OutputTuple,
      DAOManagerTransferredEvent.OutputObject
    >;
    DAOManagerTransferred: TypedContractEvent<
      DAOManagerTransferredEvent.InputTuple,
      DAOManagerTransferredEvent.OutputTuple,
      DAOManagerTransferredEvent.OutputObject
    >;

    "Expiration(uint256,uint256)": TypedContractEvent<
      ExpirationEvent.InputTuple,
      ExpirationEvent.OutputTuple,
      ExpirationEvent.OutputObject
    >;
    Expiration: TypedContractEvent<
      ExpirationEvent.InputTuple,
      ExpirationEvent.OutputTuple,
      ExpirationEvent.OutputObject
    >;

    "FlagsStorageUpdated(address)": TypedContractEvent<
      FlagsStorageUpdatedEvent.InputTuple,
      FlagsStorageUpdatedEvent.OutputTuple,
      FlagsStorageUpdatedEvent.OutputObject
    >;
    FlagsStorageUpdated: TypedContractEvent<
      FlagsStorageUpdatedEvent.InputTuple,
      FlagsStorageUpdatedEvent.OutputTuple,
      FlagsStorageUpdatedEvent.OutputObject
    >;

    "Freeze(uint256)": TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;
    Freeze: TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Revoke(uint256)": TypedContractEvent<
      RevokeEvent.InputTuple,
      RevokeEvent.OutputTuple,
      RevokeEvent.OutputObject
    >;
    Revoke: TypedContractEvent<
      RevokeEvent.InputTuple,
      RevokeEvent.OutputTuple,
      RevokeEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,uint256,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,uint256,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,uint256,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetMetadataDescriptor(address)": TypedContractEvent<
      SetMetadataDescriptorEvent.InputTuple,
      SetMetadataDescriptorEvent.OutputTuple,
      SetMetadataDescriptorEvent.OutputObject
    >;
    SetMetadataDescriptor: TypedContractEvent<
      SetMetadataDescriptorEvent.InputTuple,
      SetMetadataDescriptorEvent.OutputTuple,
      SetMetadataDescriptorEvent.OutputObject
    >;

    "SlotChanged(uint256,uint256,uint256)": TypedContractEvent<
      SlotChangedEvent.InputTuple,
      SlotChangedEvent.OutputTuple,
      SlotChangedEvent.OutputObject
    >;
    SlotChanged: TypedContractEvent<
      SlotChangedEvent.InputTuple,
      SlotChangedEvent.OutputTuple,
      SlotChangedEvent.OutputObject
    >;

    "SuperAdminAdded(address)": TypedContractEvent<
      SuperAdminAddedEvent.InputTuple,
      SuperAdminAddedEvent.OutputTuple,
      SuperAdminAddedEvent.OutputObject
    >;
    SuperAdminAdded: TypedContractEvent<
      SuperAdminAddedEvent.InputTuple,
      SuperAdminAddedEvent.OutputTuple,
      SuperAdminAddedEvent.OutputObject
    >;

    "SuperAdminRemoved(address)": TypedContractEvent<
      SuperAdminRemovedEvent.InputTuple,
      SuperAdminRemovedEvent.OutputTuple,
      SuperAdminRemovedEvent.OutputObject
    >;
    SuperAdminRemoved: TypedContractEvent<
      SuperAdminRemovedEvent.InputTuple,
      SuperAdminRemovedEvent.OutputTuple,
      SuperAdminRemovedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferValue(uint256,uint256,uint256)": TypedContractEvent<
      TransferValueEvent.InputTuple,
      TransferValueEvent.OutputTuple,
      TransferValueEvent.OutputObject
    >;
    TransferValue: TypedContractEvent<
      TransferValueEvent.InputTuple,
      TransferValueEvent.OutputTuple,
      TransferValueEvent.OutputObject
    >;

    "Unfreeze(uint256)": TypedContractEvent<
      UnfreezeEvent.InputTuple,
      UnfreezeEvent.OutputTuple,
      UnfreezeEvent.OutputObject
    >;
    Unfreeze: TypedContractEvent<
      UnfreezeEvent.InputTuple,
      UnfreezeEvent.OutputTuple,
      UnfreezeEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
