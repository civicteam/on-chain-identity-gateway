/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IForwarder {
  export type ForwardRequestStruct = {
    from: AddressLike;
    to: AddressLike;
    value: BigNumberish;
    gas: BigNumberish;
    nonce: BigNumberish;
    data: BytesLike;
  };

  export type ForwardRequestStructOutput = [
    from: string,
    to: string,
    value: bigint,
    gas: bigint,
    nonce: bigint,
    data: string
  ] & {
    from: string;
    to: string;
    value: bigint;
    gas: bigint;
    nonce: bigint;
    data: string;
  };
}

export interface FlexibleNonceForwarderInterface extends Interface {
  getFunction(nameOrSignature: "execute" | "getNonce"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ForwardResult"): EventFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [IForwarder.ForwardRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
}

export namespace ForwardResultEvent {
  export type InputTuple = [arg0: boolean];
  export type OutputTuple = [arg0: boolean];
  export interface OutputObject {
    arg0: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlexibleNonceForwarder extends BaseContract {
  connect(runner?: ContractRunner | null): FlexibleNonceForwarder;
  waitForDeployment(): Promise<this>;

  interface: FlexibleNonceForwarderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  execute: TypedContractMethod<
    [req: IForwarder.ForwardRequestStruct, signature: BytesLike],
    [[boolean, string]],
    "payable"
  >;

  getNonce: TypedContractMethod<[from: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [req: IForwarder.ForwardRequestStruct, signature: BytesLike],
    [[boolean, string]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[from: AddressLike], [bigint], "view">;

  getEvent(
    key: "ForwardResult"
  ): TypedContractEvent<
    ForwardResultEvent.InputTuple,
    ForwardResultEvent.OutputTuple,
    ForwardResultEvent.OutputObject
  >;

  filters: {
    "ForwardResult(bool)": TypedContractEvent<
      ForwardResultEvent.InputTuple,
      ForwardResultEvent.OutputTuple,
      ForwardResultEvent.OutputObject
    >;
    ForwardResult: TypedContractEvent<
      ForwardResultEvent.InputTuple,
      ForwardResultEvent.OutputTuple,
      ForwardResultEvent.OutputObject
    >;
  };
}
