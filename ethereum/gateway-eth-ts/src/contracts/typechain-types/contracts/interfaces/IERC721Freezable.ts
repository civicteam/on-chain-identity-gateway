/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IERC721FreezableInterface extends Interface {
  getFunction(nameOrSignature: "freeze" | "unfreeze"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Freeze" | "Unfreeze"): EventFragment;

  encodeFunctionData(
    functionFragment: "freeze",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreeze",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unfreeze", data: BytesLike): Result;
}

export namespace FreezeEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnfreezeEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC721Freezable extends BaseContract {
  connect(runner?: ContractRunner | null): IERC721Freezable;
  waitForDeployment(): Promise<this>;

  interface: IERC721FreezableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  freeze: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  unfreeze: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "freeze"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unfreeze"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Freeze"
  ): TypedContractEvent<
    FreezeEvent.InputTuple,
    FreezeEvent.OutputTuple,
    FreezeEvent.OutputObject
  >;
  getEvent(
    key: "Unfreeze"
  ): TypedContractEvent<
    UnfreezeEvent.InputTuple,
    UnfreezeEvent.OutputTuple,
    UnfreezeEvent.OutputObject
  >;

  filters: {
    "Freeze(uint256)": TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;
    Freeze: TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;

    "Unfreeze(uint256)": TypedContractEvent<
      UnfreezeEvent.InputTuple,
      UnfreezeEvent.OutputTuple,
      UnfreezeEvent.OutputObject
    >;
    Unfreeze: TypedContractEvent<
      UnfreezeEvent.InputTuple,
      UnfreezeEvent.OutputTuple,
      UnfreezeEvent.OutputObject
    >;
  };
}
