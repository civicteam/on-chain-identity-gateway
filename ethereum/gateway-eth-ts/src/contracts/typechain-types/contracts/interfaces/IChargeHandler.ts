/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ChargeStruct = {
  value: BigNumberish;
  chargeType: BigNumberish;
  token: AddressLike;
  tokenSender: AddressLike;
  recipient: AddressLike;
};

export type ChargeStructOutput = [
  value: bigint,
  chargeType: bigint,
  token: string,
  tokenSender: string,
  recipient: string
] & {
  value: bigint;
  chargeType: bigint;
  token: string;
  tokenSender: string;
  recipient: string;
};

export interface IChargeHandlerInterface extends Interface {
  getFunction(
    nameOrSignature: "handleCharge" | "setApproval"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ApprovalSet" | "ChargePaid"): EventFragment;

  encodeFunctionData(
    functionFragment: "handleCharge",
    values: [ChargeStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "handleCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
}

export namespace ApprovalSetEvent {
  export type InputTuple = [
    gatewayTokenAddress: AddressLike,
    tokenAddress: AddressLike,
    tokens: BigNumberish,
    network: BigNumberish
  ];
  export type OutputTuple = [
    gatewayTokenAddress: string,
    tokenAddress: string,
    tokens: bigint,
    network: bigint
  ];
  export interface OutputObject {
    gatewayTokenAddress: string;
    tokenAddress: string;
    tokens: bigint;
    network: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChargePaidEvent {
  export type InputTuple = [arg0: ChargeStruct];
  export type OutputTuple = [arg0: ChargeStructOutput];
  export interface OutputObject {
    arg0: ChargeStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IChargeHandler extends BaseContract {
  connect(runner?: ContractRunner | null): IChargeHandler;
  waitForDeployment(): Promise<this>;

  interface: IChargeHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  handleCharge: TypedContractMethod<
    [charge: ChargeStruct, network: BigNumberish],
    [void],
    "payable"
  >;

  setApproval: TypedContractMethod<
    [
      gatewayTokenAddress: AddressLike,
      tokenAddress: AddressLike,
      tokens: BigNumberish,
      network: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "handleCharge"
  ): TypedContractMethod<
    [charge: ChargeStruct, network: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setApproval"
  ): TypedContractMethod<
    [
      gatewayTokenAddress: AddressLike,
      tokenAddress: AddressLike,
      tokens: BigNumberish,
      network: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ApprovalSet"
  ): TypedContractEvent<
    ApprovalSetEvent.InputTuple,
    ApprovalSetEvent.OutputTuple,
    ApprovalSetEvent.OutputObject
  >;
  getEvent(
    key: "ChargePaid"
  ): TypedContractEvent<
    ChargePaidEvent.InputTuple,
    ChargePaidEvent.OutputTuple,
    ChargePaidEvent.OutputObject
  >;

  filters: {
    "ApprovalSet(address,address,uint256,uint256)": TypedContractEvent<
      ApprovalSetEvent.InputTuple,
      ApprovalSetEvent.OutputTuple,
      ApprovalSetEvent.OutputObject
    >;
    ApprovalSet: TypedContractEvent<
      ApprovalSetEvent.InputTuple,
      ApprovalSetEvent.OutputTuple,
      ApprovalSetEvent.OutputObject
    >;

    "ChargePaid(tuple)": TypedContractEvent<
      ChargePaidEvent.InputTuple,
      ChargePaidEvent.OutputTuple,
      ChargePaidEvent.OutputObject
    >;
    ChargePaid: TypedContractEvent<
      ChargePaidEvent.InputTuple,
      ChargePaidEvent.OutputTuple,
      ChargePaidEvent.OutputObject
    >;
  };
}
