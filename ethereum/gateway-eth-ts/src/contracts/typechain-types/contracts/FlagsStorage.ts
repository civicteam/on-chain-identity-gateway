/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FlagsStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFlag"
      | "addFlags"
      | "flagIndexes"
      | "initialize"
      | "isFlagSupported"
      | "proxiableUUID"
      | "removeFlag"
      | "removeFlags"
      | "superAdmin"
      | "supportedFlagsMask"
      | "updateSuperAdmin"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "FlagAdded"
      | "FlagRemoved"
      | "Initialized"
      | "SuperAdminUpdated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addFlag",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFlags",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "flagIndexes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFlagSupported",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFlag",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFlags",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "superAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedFlagsMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSuperAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addFlag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFlags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flagIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFlagSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFlag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "superAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedFlagsMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlagAddedEvent {
  export type InputTuple = [flag: BytesLike, index: BigNumberish];
  export type OutputTuple = [flag: string, index: bigint];
  export interface OutputObject {
    flag: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlagRemovedEvent {
  export type InputTuple = [flag: BytesLike];
  export type OutputTuple = [flag: string];
  export interface OutputObject {
    flag: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuperAdminUpdatedEvent {
  export type InputTuple = [
    prevSuperAdmin: AddressLike,
    superAdmin: AddressLike
  ];
  export type OutputTuple = [prevSuperAdmin: string, superAdmin: string];
  export interface OutputObject {
    prevSuperAdmin: string;
    superAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlagsStorage extends BaseContract {
  connect(runner?: ContractRunner | null): FlagsStorage;
  waitForDeployment(): Promise<this>;

  interface: FlagsStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFlag: TypedContractMethod<
    [flag: BytesLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;

  addFlags: TypedContractMethod<
    [flags: BytesLike[], indexes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  flagIndexes: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [_superAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  isFlagSupported: TypedContractMethod<[flag: BytesLike], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeFlag: TypedContractMethod<[flag: BytesLike], [void], "nonpayable">;

  removeFlags: TypedContractMethod<[flags: BytesLike[]], [void], "nonpayable">;

  superAdmin: TypedContractMethod<[], [string], "view">;

  supportedFlagsMask: TypedContractMethod<[], [bigint], "view">;

  updateSuperAdmin: TypedContractMethod<
    [newSuperAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFlag"
  ): TypedContractMethod<
    [flag: BytesLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addFlags"
  ): TypedContractMethod<
    [flags: BytesLike[], indexes: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flagIndexes"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_superAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isFlagSupported"
  ): TypedContractMethod<[flag: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFlag"
  ): TypedContractMethod<[flag: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFlags"
  ): TypedContractMethod<[flags: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "superAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportedFlagsMask"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateSuperAdmin"
  ): TypedContractMethod<[newSuperAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "FlagAdded"
  ): TypedContractEvent<
    FlagAddedEvent.InputTuple,
    FlagAddedEvent.OutputTuple,
    FlagAddedEvent.OutputObject
  >;
  getEvent(
    key: "FlagRemoved"
  ): TypedContractEvent<
    FlagRemovedEvent.InputTuple,
    FlagRemovedEvent.OutputTuple,
    FlagRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "SuperAdminUpdated"
  ): TypedContractEvent<
    SuperAdminUpdatedEvent.InputTuple,
    SuperAdminUpdatedEvent.OutputTuple,
    SuperAdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "FlagAdded(bytes32,uint8)": TypedContractEvent<
      FlagAddedEvent.InputTuple,
      FlagAddedEvent.OutputTuple,
      FlagAddedEvent.OutputObject
    >;
    FlagAdded: TypedContractEvent<
      FlagAddedEvent.InputTuple,
      FlagAddedEvent.OutputTuple,
      FlagAddedEvent.OutputObject
    >;

    "FlagRemoved(bytes32)": TypedContractEvent<
      FlagRemovedEvent.InputTuple,
      FlagRemovedEvent.OutputTuple,
      FlagRemovedEvent.OutputObject
    >;
    FlagRemoved: TypedContractEvent<
      FlagRemovedEvent.InputTuple,
      FlagRemovedEvent.OutputTuple,
      FlagRemovedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "SuperAdminUpdated(address,address)": TypedContractEvent<
      SuperAdminUpdatedEvent.InputTuple,
      SuperAdminUpdatedEvent.OutputTuple,
      SuperAdminUpdatedEvent.OutputObject
    >;
    SuperAdminUpdated: TypedContractEvent<
      SuperAdminUpdatedEvent.InputTuple,
      SuperAdminUpdatedEvent.OutputTuple,
      SuperAdminUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
