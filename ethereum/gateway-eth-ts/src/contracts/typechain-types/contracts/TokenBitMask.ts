/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenBitMaskInterface extends Interface {
  getFunction(nameOrSignature: "flagsStorage"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BitMaskUpdated" | "FlagsStorageUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "flagsStorage",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "flagsStorage",
    data: BytesLike
  ): Result;
}

export namespace BitMaskUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, bitmask: BigNumberish];
  export type OutputTuple = [tokenId: bigint, bitmask: bigint];
  export interface OutputObject {
    tokenId: bigint;
    bitmask: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlagsStorageUpdatedEvent {
  export type InputTuple = [flagsStorage: AddressLike];
  export type OutputTuple = [flagsStorage: string];
  export interface OutputObject {
    flagsStorage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenBitMask extends BaseContract {
  connect(runner?: ContractRunner | null): TokenBitMask;
  waitForDeployment(): Promise<this>;

  interface: TokenBitMaskInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  flagsStorage: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "flagsStorage"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BitMaskUpdated"
  ): TypedContractEvent<
    BitMaskUpdatedEvent.InputTuple,
    BitMaskUpdatedEvent.OutputTuple,
    BitMaskUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FlagsStorageUpdated"
  ): TypedContractEvent<
    FlagsStorageUpdatedEvent.InputTuple,
    FlagsStorageUpdatedEvent.OutputTuple,
    FlagsStorageUpdatedEvent.OutputObject
  >;

  filters: {
    "BitMaskUpdated(uint256,uint256)": TypedContractEvent<
      BitMaskUpdatedEvent.InputTuple,
      BitMaskUpdatedEvent.OutputTuple,
      BitMaskUpdatedEvent.OutputObject
    >;
    BitMaskUpdated: TypedContractEvent<
      BitMaskUpdatedEvent.InputTuple,
      BitMaskUpdatedEvent.OutputTuple,
      BitMaskUpdatedEvent.OutputObject
    >;

    "FlagsStorageUpdated(address)": TypedContractEvent<
      FlagsStorageUpdatedEvent.InputTuple,
      FlagsStorageUpdatedEvent.OutputTuple,
      FlagsStorageUpdatedEvent.OutputObject
    >;
    FlagsStorageUpdated: TypedContractEvent<
      FlagsStorageUpdatedEvent.InputTuple,
      FlagsStorageUpdatedEvent.OutputTuple,
      FlagsStorageUpdatedEvent.OutputObject
    >;
  };
}
