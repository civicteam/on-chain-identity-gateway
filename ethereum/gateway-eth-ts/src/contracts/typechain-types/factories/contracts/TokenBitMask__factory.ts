/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TokenBitMask,
  TokenBitMaskInterface,
} from "../../contracts/TokenBitMask";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bitmask",
        type: "uint256",
      },
    ],
    name: "BitMaskUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "flagsStorage",
        type: "address",
      },
    ],
    name: "FlagsStorageUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "flagsStorage",
    outputs: [
      {
        internalType: "contract IFlagsStorage",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060918061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632d33d27a14602d575b600080fd5b600054603f906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f3fea2646970667358221220b7ead1cb0f04e3fc04b562acfe06cd4002b5587a3a420ffaf9b7a4230d71aa8564736f6c63430008130033";

type TokenBitMaskConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenBitMaskConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenBitMask__factory extends ContractFactory {
  constructor(...args: TokenBitMaskConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TokenBitMask & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TokenBitMask__factory {
    return super.connect(runner) as TokenBitMask__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenBitMaskInterface {
    return new Interface(_abi) as TokenBitMaskInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TokenBitMask {
    return new Contract(address, _abi, runner) as unknown as TokenBitMask;
  }
}
